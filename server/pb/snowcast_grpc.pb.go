// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnowcastClient is the client API for Snowcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowcastClient interface {
	Listen(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (Snowcast_ListenClient, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FetchMessages(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*Messages, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (Snowcast_SendFileClient, error)
	FetchFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Snowcast_FetchFileClient, error)
}

type snowcastClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowcastClient(cc grpc.ClientConnInterface) SnowcastClient {
	return &snowcastClient{cc}
}

func (c *snowcastClient) Listen(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (Snowcast_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snowcast_ServiceDesc.Streams[0], "/snowcast.Snowcast/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowcastListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snowcast_ListenClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type snowcastListenClient struct {
	grpc.ClientStream
}

func (x *snowcastListenClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snowcastClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/snowcast.Snowcast/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowcastClient) FetchMessages(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/snowcast.Snowcast/FetchMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowcastClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (Snowcast_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snowcast_ServiceDesc.Streams[1], "/snowcast.Snowcast/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowcastSendFileClient{stream}
	return x, nil
}

type Snowcast_SendFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type snowcastSendFileClient struct {
	grpc.ClientStream
}

func (x *snowcastSendFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snowcastSendFileClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snowcastClient) FetchFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Snowcast_FetchFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snowcast_ServiceDesc.Streams[2], "/snowcast.Snowcast/FetchFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowcastFetchFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snowcast_FetchFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type snowcastFetchFileClient struct {
	grpc.ClientStream
}

func (x *snowcastFetchFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnowcastServer is the server API for Snowcast service.
// All implementations must embed UnimplementedSnowcastServer
// for forward compatibility
type SnowcastServer interface {
	Listen(*UserInfo, Snowcast_ListenServer) error
	SendMessage(context.Context, *Message) (*emptypb.Empty, error)
	FetchMessages(context.Context, *FetchRequest) (*Messages, error)
	SendFile(Snowcast_SendFileServer) error
	FetchFile(*FileRequest, Snowcast_FetchFileServer) error
	mustEmbedUnimplementedSnowcastServer()
}

// UnimplementedSnowcastServer must be embedded to have forward compatible implementations.
type UnimplementedSnowcastServer struct {
}

func (UnimplementedSnowcastServer) Listen(*UserInfo, Snowcast_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedSnowcastServer) SendMessage(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSnowcastServer) FetchMessages(context.Context, *FetchRequest) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMessages not implemented")
}
func (UnimplementedSnowcastServer) SendFile(Snowcast_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedSnowcastServer) FetchFile(*FileRequest, Snowcast_FetchFileServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchFile not implemented")
}
func (UnimplementedSnowcastServer) mustEmbedUnimplementedSnowcastServer() {}

// UnsafeSnowcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowcastServer will
// result in compilation errors.
type UnsafeSnowcastServer interface {
	mustEmbedUnimplementedSnowcastServer()
}

func RegisterSnowcastServer(s grpc.ServiceRegistrar, srv SnowcastServer) {
	s.RegisterService(&Snowcast_ServiceDesc, srv)
}

func _Snowcast_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowcastServer).Listen(m, &snowcastListenServer{stream})
}

type Snowcast_ListenServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type snowcastListenServer struct {
	grpc.ServerStream
}

func (x *snowcastListenServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _Snowcast_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowcastServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowcast.Snowcast/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowcastServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowcast_FetchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowcastServer).FetchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowcast.Snowcast/FetchMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowcastServer).FetchMessages(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowcast_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnowcastServer).SendFile(&snowcastSendFileServer{stream})
}

type Snowcast_SendFileServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type snowcastSendFileServer struct {
	grpc.ServerStream
}

func (x *snowcastSendFileServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snowcastSendFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Snowcast_FetchFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowcastServer).FetchFile(m, &snowcastFetchFileServer{stream})
}

type Snowcast_FetchFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type snowcastFetchFileServer struct {
	grpc.ServerStream
}

func (x *snowcastFetchFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Snowcast_ServiceDesc is the grpc.ServiceDesc for Snowcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snowcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowcast.Snowcast",
	HandlerType: (*SnowcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Snowcast_SendMessage_Handler,
		},
		{
			MethodName: "FetchMessages",
			Handler:    _Snowcast_FetchMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Snowcast_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendFile",
			Handler:       _Snowcast_SendFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FetchFile",
			Handler:       _Snowcast_FetchFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model/snowcast.proto",
}
