// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnowcastClient is the client API for Snowcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowcastClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*WelcomeReply, error)
	PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (Snowcast_PlaySongClient, error)
}

type snowcastClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowcastClient(cc grpc.ClientConnInterface) SnowcastClient {
	return &snowcastClient{cc}
}

func (c *snowcastClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*WelcomeReply, error) {
	out := new(WelcomeReply)
	err := c.cc.Invoke(ctx, "/snowcast.Snowcast/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowcastClient) PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (Snowcast_PlaySongClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snowcast_ServiceDesc.Streams[0], "/snowcast.Snowcast/PlaySong", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowcastPlaySongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snowcast_PlaySongClient interface {
	Recv() (*PlaySongReply, error)
	grpc.ClientStream
}

type snowcastPlaySongClient struct {
	grpc.ClientStream
}

func (x *snowcastPlaySongClient) Recv() (*PlaySongReply, error) {
	m := new(PlaySongReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnowcastServer is the server API for Snowcast service.
// All implementations must embed UnimplementedSnowcastServer
// for forward compatibility
type SnowcastServer interface {
	SayHello(context.Context, *HelloRequest) (*WelcomeReply, error)
	PlaySong(*PlaySongRequest, Snowcast_PlaySongServer) error
	mustEmbedUnimplementedSnowcastServer()
}

// UnimplementedSnowcastServer must be embedded to have forward compatible implementations.
type UnimplementedSnowcastServer struct {
}

func (UnimplementedSnowcastServer) SayHello(context.Context, *HelloRequest) (*WelcomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSnowcastServer) PlaySong(*PlaySongRequest, Snowcast_PlaySongServer) error {
	return status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedSnowcastServer) mustEmbedUnimplementedSnowcastServer() {}

// UnsafeSnowcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowcastServer will
// result in compilation errors.
type UnsafeSnowcastServer interface {
	mustEmbedUnimplementedSnowcastServer()
}

func RegisterSnowcastServer(s grpc.ServiceRegistrar, srv SnowcastServer) {
	s.RegisterService(&Snowcast_ServiceDesc, srv)
}

func _Snowcast_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowcastServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowcast.Snowcast/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowcastServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowcast_PlaySong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlaySongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowcastServer).PlaySong(m, &snowcastPlaySongServer{stream})
}

type Snowcast_PlaySongServer interface {
	Send(*PlaySongReply) error
	grpc.ServerStream
}

type snowcastPlaySongServer struct {
	grpc.ServerStream
}

func (x *snowcastPlaySongServer) Send(m *PlaySongReply) error {
	return x.ServerStream.SendMsg(m)
}

// Snowcast_ServiceDesc is the grpc.ServiceDesc for Snowcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snowcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowcast.Snowcast",
	HandlerType: (*SnowcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Snowcast_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaySong",
			Handler:       _Snowcast_PlaySong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model/snowcast.proto",
}
