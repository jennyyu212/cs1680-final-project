// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnowcastClient is the client API for Snowcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowcastClient interface {
	Connect(ctx context.Context, in *User, opts ...grpc.CallOption) (Snowcast_ConnectClient, error)
	GetPlaylist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Playlist, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FetchMessages(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*Messages, error)
	FetchMusic(ctx context.Context, in *Music, opts ...grpc.CallOption) (Snowcast_FetchMusicClient, error)
}

type snowcastClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowcastClient(cc grpc.ClientConnInterface) SnowcastClient {
	return &snowcastClient{cc}
}

func (c *snowcastClient) Connect(ctx context.Context, in *User, opts ...grpc.CallOption) (Snowcast_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snowcast_ServiceDesc.Streams[0], "/snowcast.Snowcast/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowcastConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snowcast_ConnectClient interface {
	Recv() (*MessageUpdate, error)
	grpc.ClientStream
}

type snowcastConnectClient struct {
	grpc.ClientStream
}

func (x *snowcastConnectClient) Recv() (*MessageUpdate, error) {
	m := new(MessageUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snowcastClient) GetPlaylist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/snowcast.Snowcast/GetPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowcastClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/snowcast.Snowcast/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowcastClient) FetchMessages(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/snowcast.Snowcast/FetchMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowcastClient) FetchMusic(ctx context.Context, in *Music, opts ...grpc.CallOption) (Snowcast_FetchMusicClient, error) {
	stream, err := c.cc.NewStream(ctx, &Snowcast_ServiceDesc.Streams[1], "/snowcast.Snowcast/FetchMusic", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowcastFetchMusicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snowcast_FetchMusicClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type snowcastFetchMusicClient struct {
	grpc.ClientStream
}

func (x *snowcastFetchMusicClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnowcastServer is the server API for Snowcast service.
// All implementations must embed UnimplementedSnowcastServer
// for forward compatibility
type SnowcastServer interface {
	Connect(*User, Snowcast_ConnectServer) error
	GetPlaylist(context.Context, *emptypb.Empty) (*Playlist, error)
	SendMessage(context.Context, *Message) (*emptypb.Empty, error)
	FetchMessages(context.Context, *FetchRequest) (*Messages, error)
	FetchMusic(*Music, Snowcast_FetchMusicServer) error
	mustEmbedUnimplementedSnowcastServer()
}

// UnimplementedSnowcastServer must be embedded to have forward compatible implementations.
type UnimplementedSnowcastServer struct {
}

func (UnimplementedSnowcastServer) Connect(*User, Snowcast_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedSnowcastServer) GetPlaylist(context.Context, *emptypb.Empty) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylist not implemented")
}
func (UnimplementedSnowcastServer) SendMessage(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSnowcastServer) FetchMessages(context.Context, *FetchRequest) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMessages not implemented")
}
func (UnimplementedSnowcastServer) FetchMusic(*Music, Snowcast_FetchMusicServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchMusic not implemented")
}
func (UnimplementedSnowcastServer) mustEmbedUnimplementedSnowcastServer() {}

// UnsafeSnowcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowcastServer will
// result in compilation errors.
type UnsafeSnowcastServer interface {
	mustEmbedUnimplementedSnowcastServer()
}

func RegisterSnowcastServer(s grpc.ServiceRegistrar, srv SnowcastServer) {
	s.RegisterService(&Snowcast_ServiceDesc, srv)
}

func _Snowcast_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowcastServer).Connect(m, &snowcastConnectServer{stream})
}

type Snowcast_ConnectServer interface {
	Send(*MessageUpdate) error
	grpc.ServerStream
}

type snowcastConnectServer struct {
	grpc.ServerStream
}

func (x *snowcastConnectServer) Send(m *MessageUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Snowcast_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowcastServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowcast.Snowcast/GetPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowcastServer).GetPlaylist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowcast_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowcastServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowcast.Snowcast/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowcastServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowcast_FetchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowcastServer).FetchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowcast.Snowcast/FetchMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowcastServer).FetchMessages(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowcast_FetchMusic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Music)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowcastServer).FetchMusic(m, &snowcastFetchMusicServer{stream})
}

type Snowcast_FetchMusicServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type snowcastFetchMusicServer struct {
	grpc.ServerStream
}

func (x *snowcastFetchMusicServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Snowcast_ServiceDesc is the grpc.ServiceDesc for Snowcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snowcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowcast.Snowcast",
	HandlerType: (*SnowcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlaylist",
			Handler:    _Snowcast_GetPlaylist_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Snowcast_SendMessage_Handler,
		},
		{
			MethodName: "FetchMessages",
			Handler:    _Snowcast_FetchMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Snowcast_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchMusic",
			Handler:       _Snowcast_FetchMusic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model/snowcast.proto",
}
